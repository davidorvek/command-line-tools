#!/usr/bin/env python3
import pctools as pct
import sys

allowable_pc_input = '0123456789TE'
allowable_cardinality_input = [2,3,4,5,6,7,8,9,10]
input_length = len(sys.argv)
# Not enough arguments or set from pipe and no cardinality from user
if input_length == 1:
    if not sys.stdin.isatty():
        pcsets = [i.rstrip() for i in sys.stdin.readlines()]
    else:
        print('ERROR: Not enough arguments. See help screen (invoked with subsets -h) for correct usage', file = sys.stderr)
        sys.exit()
    cardinality = 'all'

# Pcset must be coming from pipe or pcset with no cardinality from user
elif input_length == 2:
    if sys.argv[1] == '-h':
        with open('/users/davidorvek/command-line-tools/helpscrn/subsets.hlp', 'r') as file:
            contents = file.read()
        print(contents)
        sys.exit()
    else:
        if sys.stdin.isatty():
            pcset = sys.argv[1]
            cardinality = 'all'
        else:
            pcsets = [i.rstrip() for i in sys.stdin.readlines()]
            try:
                cardinality = int(sys.argv[1])
            except:
                print("ERROR: '%s' is not a valid cardinality" % (sys.argv[1]), file = sys.stderr)
                sys.exit()


# Pcset and cardinality must be coming from user
elif input_length == 3:
    pcset = sys.argv[1]
    try:
        cardinality = int(sys.argv[2])
    except:
        print("ERROR: '%s' is not a valid cardinality" % (sys.argv[2]), file = sys.stderr)
        sys.exit()

# Too many arguments
else:
    print('ERROR: Too many arguments. See help screen (invoked with subsets -h) for correct usage', file = sys.stderr)
    sys.exit()

### Checks for correct input if no usage errors thrown
# Checks cardinality input
if cardinality == 'all':
    pass
else:
    if cardinality not in allowable_cardinality_input:
        print("ERROR: '%s' is not a valid cardinality" % (cardinality), file = sys.stderr)
        sys.exit()

## Catches common alternatives for pcset notation
# Multiple sets from stdin
try:
    if pcsets:
        for pcset in pcsets:
            rep_with_T = ['t', 'a', 'A']
            rep_with_E = ['e', 'b', 'B']
            for i in rep_with_T:
                if i in pcset:
                    pcset = pcset.replace(i, 'T')
            for j in rep_with_E:
                if j in pcset:
                    pcset = pcset.replace(j, 'E')

            # Checks pcset for invalid characters
            for k in pcset:
                if k not in allowable_pc_input:
                    print("ERROR: '%s' is not a valid character" % (k), file = sys.stderr)
                    sys.exit()

            # Converts input to a list, finds subsets, and prints them and their count
            if cardinality == 'all':
                subsets = pct.subsets(pct.string2array(pcset))
                for subset in subsets:
                    print(subset, subsets[subset])
            else:
                subsets = pct.subsets(pct.string2array(pcset), cardinality)
                for subset in subsets:
                    print(subset, subsets[subset])

# One set from user
except:
    rep_with_T = ['t', 'a', 'A']
    rep_with_E = ['e', 'b', 'B']
    for i in rep_with_T:
        if i in pcset:
            pcset = pcset.replace(i, 'T')
    for j in rep_with_E:
        if j in pcset:
            pcset = pcset.replace(j, 'E')

    # Checks pcset for invalid characters
    for k in pcset:
        if k not in allowable_pc_input:
            print("ERROR: '%s' is not a valid character" % (k), file = sys.stderr)
            sys.exit()

    # Converts input to a list, finds subsets, and prints them and their count
    if cardinality == 'all':
        subsets = pct.subsets(pct.string2array(pcset))
        for subset in subsets:
            print(subset, subsets[subset])
    else:
        subsets = pct.subsets(pct.string2array(pcset), cardinality)
        for subset in subsets:
            print(subset, subsets[subset])
