#!/usr/bin/env python3
import pctools as pct
import sys

allowable_input = '0123456789TE'
input_length = len(sys.argv)

# Input is either coming from a pipe or the user has just entered the script name
if input_length == 1:
    try:
        pcsets = [i.rstrip() for i in sys.stdin.readlines()]
    except:
        print('\nERROR: Please enter a pcset', file = sys.stderr)
        sys.exit()

# Input is coming from the user
elif input_length == 2:
    # Check for -h
    if sys.argv[1] == '-h':
        with open('/users/davidorvek/command-line-tools/helpscrn/prime.hlp', 'r') as file:
            contents = file.read()
        print(contents)
        sys.exit()
    # Check for another option (not allowed)
    elif sys.argv[1][0] == '-' and sys.argv[1] != '-h':
        print('ERROR: No options available for norm', file = sys.stderr)
        sys.exit()
    else:
        pcset = sys.argv[1]

# Too many arguments
else:
    print('ERROR: Too many arguments. See help screen (invoked with prime -h) for correct usage', file = sys.stderr)
    sys.exit()

## Catches common alternatives for pcset notation
# Multiple sets from stdin
try:
    if pcsets:
        for pcset in pcsets:
            rep_with_T = ['t', 'a', 'A']
            rep_with_E = ['e', 'b', 'B']
            for i in rep_with_T:
                if i in pcset:
                    pcset = pcset.replace(i, 'T')
            for j in rep_with_E:
                if j in pcset:
                    pcset = pcset.replace(j, 'E')

            # Checks pcset for invalid characters
            for k in pcset:
                if k not in allowable_input:
                    print("ERROR: '%s' is not a valid character" % (k), file = sys.stderr)
                    sys.exit()

            # Checks for alternate prime forms, converts input to a list, finds the Forte number,
            # retrieves the prime form, and prints it
            if pct.sc[pct.find_forte(pct.string2array(pcset))]['forte'] != 'NA':
                rahn_prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['prime']
                forte_prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['forte']
                print("Rahn Prime: %s\nForte Prime: %s" % (pct.array2string(rahn_prime), pct.array2string(forte_prime)))
            else:
                prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['prime']
                print(pct.array2string(prime))

# One set from user
except:
    rep_with_T = ['t', 'a', 'A']
    rep_with_E = ['e', 'b', 'B']
    for i in rep_with_T:
        if i in pcset:
            pcset = pcset.replace(i, 'T')
    for j in rep_with_E:
        if j in pcset:
            pcset = pcset.replace(j, 'E')

    # Checks pcset for invalid characters
    for k in pcset:
        if k not in allowable_input:
            print("ERROR: '%s' is not a valid character" % (k), file = sys.stderr)
            sys.exit()
            
    # Checks for alternate prime forms, converts input to a list, finds the Forte number,
    # retrieves the prime form, and prints it
    if pct.sc[pct.find_forte(pct.string2array(pcset))]['forte'] != 'NA':
        rahn_prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['prime']
        forte_prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['forte']
        print("Rahn Prime: %s\nForte Prime: %s" % (pct.array2string(rahn_prime), pct.array2string(forte_prime)))
    else:
        prime = pct.sc[pct.find_forte(pct.string2array(pcset))]['prime']
        print(pct.array2string(prime))
